apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory'

logger.info("Library using version=$project.version")

if (project.plugins.hasPlugin('com.android.library')) {
    android.libraryVariants.all {
        variant ->
            Task javadocTask = task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
                group = 'artifact'
                description "Generates Javadoc for $variant.name"
                destinationDir = new File(project.docsDir, "javadoc-$variant.name")

                if (JavaVersion.current().isJava8Compatible()) {
                    options.addStringOption('Xdoclint:none', '-quiet')
                }
            }

            // For official release, don't prefix the name so the artifact is published correctly
            // (Can't seem to modify it for publishing, for whatever reason...)
            String classifierPrefix = (variant.name == 'release') ? '' : "$variant.name-"

            Task javadocJarTask = task("generate${variant.name.capitalize()}JavadocJar", type: Jar, dependsOn: javadocTask) {
                group = 'artifact'
                description = "Generates Javadoc jar for $variant.name"

                classifier = "${classifierPrefix}javadoc"
                from javadocTask.destinationDir
            }

            Task sourcesJarTask = task("generate${variant.name.capitalize()}SourcesJar", type: Jar) {
                group = 'artifact'
                description = "Generates sources jar for $variant.name"

                classifier = "${classifierPrefix}sources"
                from variant.javaCompiler.source
            }

            if (variant.name == 'release') {
                // There's a lot of "magic" around the archives configuration; easier
                // just to embrace it rather than try to configure around it
                artifacts {
                    archives javadocJarTask, sourcesJarTask
                }
            } else {
                // Create a configuration we can publish from for each variant
                String configurationName = "archives${variant.name.capitalize()}"
                configurations.create(configurationName)
                artifacts.add configurationName, javadocJarTask
                artifacts.add configurationName, sourcesJarTask
            }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                name POM_NAME
                description POM_DESCRIPTION
                packaging POM_PACKAGING
                url POM_URL

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                developers {
                    developer {
                        id 'ThePacific'
                        name 'The Pacific'
                        email 'thepacific2016@aol.com'
                    }
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    publish true
    pkg {
        repo = "maven"
        name = "divider"
        labels = ['divider', 'ThePacific']
        websiteUrl = WEB_SITE_URL
        issueTrackerUrl = ISSUE_TRACKER_URL
        vcsUrl = VCS_URL
        licenses = ["Apache-2.0"]
        version {
            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.gpg.password")
            }
            mavenCentralSync {
                sync = true
                user = properties.getProperty("bintray.oss.user")
                password = properties.getProperty("bintray.oss.password")
                close = '1'
            }
        }
    }
}